// --- Group: group-1760444601245 ---
// Import THREE if you haven't already: import * as THREE from 'three';
const group = new THREE.Group();
group.position.copy(new THREE.Vector3(1.186548115511993, 0.6008439506973804, -0.00029176215275137366));
group.rotation.copy(new THREE.Euler(0, 0, 0));
group.scale.copy(new THREE.Vector3(1, 1, 1));

(() => {
  // --- Shape: cube-1760443733317-0.27639545827026046 ---
  
  const cube_0_geometry = new THREE.BoxGeometry();
  const cube_0_material = new THREE.MeshStandardMaterial({
    color: '#a2a0a0',
    opacity: 1,
    transparent: false,
    metalness: 0.5,
    roughness: 0.5
  });
  const cube_0 = new THREE.Mesh(cube_0_geometry, cube_0_material);
  
  cube_0.position.copy(new THREE.Vector3(-1.186548115511993, 0.6993584109386501, 0.00029176215275137366));
  cube_0.rotation.copy(new THREE.Euler(0, 0, 0));
  cube_0.scale.copy(new THREE.Vector3(4.270774703928422, 1.7579221198622381, 1.713506575562804));
  cube_0.castShadow = true;
  cube_0.receiveShadow = true;
  group.add(cube_0);
})();

(() => {
  // --- Shape: cube-1760443779067-0.01781711039442191 ---
  
  const cube_1_geometry = new THREE.BoxGeometry();
  const cube_1_material = new THREE.MeshStandardMaterial({
    color: '#434675',
    opacity: 1,
    transparent: false,
    metalness: 0.5,
    roughness: 0.5
  });
  const cube_1 = new THREE.Mesh(cube_1_geometry, cube_1_material);
  
  cube_1.position.copy(new THREE.Vector3(1.3902487603695812, 0.37261940515057224, 0.00029176215275137366));
  cube_1.rotation.copy(new THREE.Euler(0, 0, 0));
  cube_1.scale.copy(new THREE.Vector3(1.2267821187725285, 1.2321430147627346, 1.2326117678332056));
  cube_1.castShadow = true;
  cube_1.receiveShadow = true;
  group.add(cube_1);
})();

(() => {
  // --- Shape: cube-1760443831213-0.33425754618299375 ---
  
  const cube_2_geometry = new THREE.BoxGeometry();
  const cube_2_material = new THREE.MeshStandardMaterial({
    color: '#262a5f',
    opacity: 1,
    transparent: false,
    metalness: 0.5,
    roughness: 0.5
  });
  const cube_2 = new THREE.Mesh(cube_2_geometry, cube_2_material);
  
  cube_2.position.copy(new THREE.Vector3(2.1920809671884527, 0.1420582305713931, 0.00029176215275137366));
  cube_2.rotation.copy(new THREE.Euler(0, 0, 0));
  cube_2.scale.copy(new THREE.Vector3(0.5652960165790952, 0.6971876714492944, 0.7675417066972549));
  cube_2.castShadow = true;
  cube_2.receiveShadow = true;
  group.add(cube_2);
})();

(() => {
  // --- Shape: torus-1760443877809-0.9588001298070821 ---
  
  const torus_3_geometry = new THREE.TorusGeometry(0.5, 0.2, 32, 16);
  const torus_3_material = new THREE.MeshStandardMaterial({
    color: '#707070',
    opacity: 1,
    transparent: false,
    metalness: 0.3,
    roughness: 0.6
  });
  const torus_3 = new THREE.Mesh(torus_3_geometry, torus_3_material);
  
  torus_3.position.copy(new THREE.Vector3(-2.2986325243708716, -0.2970223463383222, 0.6954122302484769));
  torus_3.rotation.copy(new THREE.Euler(0, 0, 0));
  torus_3.scale.copy(new THREE.Vector3(0.4867913816040403, 0.4867913816040403, 0.4867913816040403));
  torus_3.castShadow = true;
  torus_3.receiveShadow = true;
  group.add(torus_3);
})();

(() => {
  // --- Shape: torus-1760443908546 ---
  
  const torus_4_geometry = new THREE.TorusGeometry(0.5, 0.2, 32, 16);
  const torus_4_material = new THREE.MeshStandardMaterial({
    color: '#646362',
    opacity: 1,
    transparent: false,
    metalness: 0.3,
    roughness: 0.6
  });
  const torus_4 = new THREE.Mesh(torus_4_geometry, torus_4_material);
  
  torus_4.position.copy(new THREE.Vector3(-1.2986325243708714, -0.31459992601964154, 0.7467598908329576));
  torus_4.rotation.copy(new THREE.Euler(0, 0, 0));
  torus_4.scale.copy(new THREE.Vector3(0.4867913816040403, 0.4867913816040403, 0.4867913816040403));
  torus_4.castShadow = true;
  torus_4.receiveShadow = true;
  group.add(torus_4);
})();

(() => {
  // --- Shape: torus-1760443990506 ---
  
  const torus_5_geometry = new THREE.TorusGeometry(0.5, 0.2, 32, 16);
  const torus_5_material = new THREE.MeshStandardMaterial({
    color: '#676565',
    opacity: 1,
    transparent: false,
    metalness: 0.3,
    roughness: 0.6
  });
  const torus_5 = new THREE.Mesh(torus_5_geometry, torus_5_material);
  
  torus_5.position.copy(new THREE.Vector3(-1.364324058196492, -0.31459992601964154, -0.7500283707494213));
  torus_5.rotation.copy(new THREE.Euler(0, 0, 0));
  torus_5.scale.copy(new THREE.Vector3(0.4867913816040403, 0.4867913816040403, 0.4867913816040403));
  torus_5.castShadow = true;
  torus_5.receiveShadow = true;
  group.add(torus_5);
})();

(() => {
  // --- Shape: torus-1760444008962 ---
  
  const torus_6_geometry = new THREE.TorusGeometry(0.5, 0.2, 32, 16);
  const torus_6_material = new THREE.MeshStandardMaterial({
    color: '#6e6e6e',
    opacity: 1,
    transparent: false,
    metalness: 0.3,
    roughness: 0.6
  });
  const torus_6 = new THREE.Mesh(torus_6_geometry, torus_6_material);
  
  torus_6.position.copy(new THREE.Vector3(-2.237402777820588, -0.31459992601964154, -0.7008267588742614));
  torus_6.rotation.copy(new THREE.Euler(0, 0, 0));
  torus_6.scale.copy(new THREE.Vector3(0.4867913816040403, 0.4867913816040403, 0.4867913816040403));
  torus_6.castShadow = true;
  torus_6.receiveShadow = true;
  group.add(torus_6);
})();

(() => {
  // --- Shape: torus-1760444026194 ---
  
  const torus_7_geometry = new THREE.TorusGeometry(0.5, 0.2, 32, 16);
  const torus_7_material = new THREE.MeshStandardMaterial({
    color: '#808080',
    opacity: 1,
    transparent: false,
    metalness: 0.3,
    roughness: 0.6
  });
  const torus_7 = new THREE.Mesh(torus_7_geometry, torus_7_material);
  
  torus_7.position.copy(new THREE.Vector3(1.4274443462936577, -0.31459992601964154, -0.44027257587213975));
  torus_7.rotation.copy(new THREE.Euler(0, 0, 0));
  torus_7.scale.copy(new THREE.Vector3(0.4867913816040403, 0.4867913816040403, 0.4867913816040403));
  torus_7.castShadow = true;
  torus_7.receiveShadow = true;
  group.add(torus_7);
})();

(() => {
  // --- Shape: torus-1760444046066 ---
  
  const torus_8_geometry = new THREE.TorusGeometry(0.5, 0.2, 32, 16);
  const torus_8_material = new THREE.MeshStandardMaterial({
    color: '#726f6e',
    opacity: 1,
    transparent: false,
    metalness: 0.3,
    roughness: 0.6
  });
  const torus_8 = new THREE.Mesh(torus_8_geometry, torus_8_material);
  
  torus_8.position.copy(new THREE.Vector3(1.375591567222941, -0.31459992601964154, 0.4477885358033826));
  torus_8.rotation.copy(new THREE.Euler(0, 0, 0));
  torus_8.scale.copy(new THREE.Vector3(0.4867913816040403, 0.4867913816040403, 0.4867913816040403));
  torus_8.castShadow = true;
  torus_8.receiveShadow = true;
  group.add(torus_8);
})();

(() => {
  // --- Shape: cube-1760444422084-0.5866357485123075 ---
  
  const cube_9_geometry = new THREE.BoxGeometry();
  const cube_9_material = new THREE.MeshStandardMaterial({
    color: '#b3f5f0',
    opacity: 0.25,
    transparent: true,
    metalness: 0.5,
    roughness: 0.5
  });
  const cube_9 = new THREE.Mesh(cube_9_geometry, cube_9_material);
  
  cube_9.position.copy(new THREE.Vector3(2.0001743591961825, 0.6559859297759139, 0.00029176215275137366));
  cube_9.rotation.copy(new THREE.Euler(0, 0, 0));
  cube_9.scale.copy(new THREE.Vector3(0.05165967599083482, 0.35395361830945415, 1));
  cube_9.castShadow = true;
  cube_9.receiveShadow = true;
  group.add(cube_9);
})();